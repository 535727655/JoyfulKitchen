package com.joyful.joyfulkitchen.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.joyful.joyfulkitchen.model.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "tb_user".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "tb_user";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UserId = new Property(0, Long.class, "userId", true, "user_id");
        public final static Property NickName = new Property(1, String.class, "nickName", false, "nickname");
        public final static Property Phone = new Property(2, String.class, "phone", false, "PHONE");
        public final static Property Email = new Property(3, String.class, "email", false, "EMAIL");
        public final static Property Pwd = new Property(4, String.class, "pwd", false, "PWD");
        public final static Property Img = new Property(5, String.class, "img", false, "IMG");
        public final static Property Birth = new Property(6, java.util.Date.class, "birth", false, "BIRTH");
        public final static Property Sex = new Property(7, int.class, "sex", false, "SEX");
        public final static Property City = new Property(8, String.class, "city", false, "CITY");
        public final static Property Country = new Property(9, String.class, "country", false, "COUNTRY");
        public final static Property Weight = new Property(10, double.class, "weight", false, "WEIGHT");
        public final static Property Heigth = new Property(11, double.class, "heigth", false, "HEIGTH");
        public final static Property Target = new Property(12, int.class, "target", false, "TARGET");
        public final static Property Power = new Property(13, int.class, "power", false, "POWER");
        public final static Property Active = new Property(14, int.class, "active", false, "ACTIVE");
        public final static Property Token = new Property(15, String.class, "token", false, "TOKEN");
        public final static Property CreateTime = new Property(16, java.util.Date.class, "createTime", false, "create_time");
        public final static Property UpdateTime = new Property(17, java.util.Date.class, "updateTime", false, "update_time");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"tb_user\" (" + //
                "\"user_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: userId
                "\"nickname\" TEXT," + // 1: nickName
                "\"PHONE\" TEXT," + // 2: phone
                "\"EMAIL\" TEXT," + // 3: email
                "\"PWD\" TEXT," + // 4: pwd
                "\"IMG\" TEXT," + // 5: img
                "\"BIRTH\" INTEGER," + // 6: birth
                "\"SEX\" INTEGER NOT NULL ," + // 7: sex
                "\"CITY\" TEXT," + // 8: city
                "\"COUNTRY\" TEXT," + // 9: country
                "\"WEIGHT\" REAL NOT NULL ," + // 10: weight
                "\"HEIGTH\" REAL NOT NULL ," + // 11: heigth
                "\"TARGET\" INTEGER NOT NULL ," + // 12: target
                "\"POWER\" INTEGER NOT NULL ," + // 13: power
                "\"ACTIVE\" INTEGER NOT NULL ," + // 14: active
                "\"TOKEN\" TEXT," + // 15: token
                "\"create_time\" INTEGER," + // 16: createTime
                "\"update_time\" INTEGER);"); // 17: updateTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"tb_user\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(1, userId);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(2, nickName);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(3, phone);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(4, email);
        }
 
        String pwd = entity.getPwd();
        if (pwd != null) {
            stmt.bindString(5, pwd);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(6, img);
        }
 
        java.util.Date birth = entity.getBirth();
        if (birth != null) {
            stmt.bindLong(7, birth.getTime());
        }
        stmt.bindLong(8, entity.getSex());
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(9, city);
        }
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(10, country);
        }
        stmt.bindDouble(11, entity.getWeight());
        stmt.bindDouble(12, entity.getHeigth());
        stmt.bindLong(13, entity.getTarget());
        stmt.bindLong(14, entity.getPower());
        stmt.bindLong(15, entity.getActive());
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(16, token);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(17, createTime.getTime());
        }
 
        java.util.Date updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindLong(18, updateTime.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(1, userId);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(2, nickName);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(3, phone);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(4, email);
        }
 
        String pwd = entity.getPwd();
        if (pwd != null) {
            stmt.bindString(5, pwd);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(6, img);
        }
 
        java.util.Date birth = entity.getBirth();
        if (birth != null) {
            stmt.bindLong(7, birth.getTime());
        }
        stmt.bindLong(8, entity.getSex());
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(9, city);
        }
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(10, country);
        }
        stmt.bindDouble(11, entity.getWeight());
        stmt.bindDouble(12, entity.getHeigth());
        stmt.bindLong(13, entity.getTarget());
        stmt.bindLong(14, entity.getPower());
        stmt.bindLong(15, entity.getActive());
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(16, token);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(17, createTime.getTime());
        }
 
        java.util.Date updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindLong(18, updateTime.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // userId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nickName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // phone
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // email
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // pwd
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // img
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // birth
            cursor.getInt(offset + 7), // sex
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // city
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // country
            cursor.getDouble(offset + 10), // weight
            cursor.getDouble(offset + 11), // heigth
            cursor.getInt(offset + 12), // target
            cursor.getInt(offset + 13), // power
            cursor.getInt(offset + 14), // active
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // token
            cursor.isNull(offset + 16) ? null : new java.util.Date(cursor.getLong(offset + 16)), // createTime
            cursor.isNull(offset + 17) ? null : new java.util.Date(cursor.getLong(offset + 17)) // updateTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setUserId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNickName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPhone(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEmail(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPwd(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setImg(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBirth(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setSex(cursor.getInt(offset + 7));
        entity.setCity(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCountry(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setWeight(cursor.getDouble(offset + 10));
        entity.setHeigth(cursor.getDouble(offset + 11));
        entity.setTarget(cursor.getInt(offset + 12));
        entity.setPower(cursor.getInt(offset + 13));
        entity.setActive(cursor.getInt(offset + 14));
        entity.setToken(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setCreateTime(cursor.isNull(offset + 16) ? null : new java.util.Date(cursor.getLong(offset + 16)));
        entity.setUpdateTime(cursor.isNull(offset + 17) ? null : new java.util.Date(cursor.getLong(offset + 17)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setUserId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getUserId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.getUserId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
