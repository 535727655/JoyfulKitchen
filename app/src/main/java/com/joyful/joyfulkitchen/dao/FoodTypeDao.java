package com.joyful.joyfulkitchen.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.joyful.joyfulkitchen.model.FoodType;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "tb_food_type".
*/
public class FoodTypeDao extends AbstractDao<FoodType, Long> {

    public static final String TABLENAME = "tb_food_type";

    /**
     * Properties of entity FoodType.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property FoodTypeId = new Property(0, Long.class, "foodTypeId", true, "food_type_id");
        public final static Property TypeName = new Property(1, String.class, "typeName", false, "type_name");
        public final static Property FoodTypeImg = new Property(2, String.class, "foodTypeImg", false, "food_type_img");
        public final static Property CreateTime = new Property(3, java.util.Date.class, "createTime", false, "create_time");
        public final static Property UpdateTime = new Property(4, java.util.Date.class, "updateTime", false, "update_time");
    }


    public FoodTypeDao(DaoConfig config) {
        super(config);
    }
    
    public FoodTypeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"tb_food_type\" (" + //
                "\"food_type_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: foodTypeId
                "\"type_name\" TEXT," + // 1: typeName
                "\"food_type_img\" TEXT," + // 2: foodTypeImg
                "\"create_time\" INTEGER," + // 3: createTime
                "\"update_time\" INTEGER);"); // 4: updateTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"tb_food_type\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FoodType entity) {
        stmt.clearBindings();
 
        Long foodTypeId = entity.getFoodTypeId();
        if (foodTypeId != null) {
            stmt.bindLong(1, foodTypeId);
        }
 
        String typeName = entity.getTypeName();
        if (typeName != null) {
            stmt.bindString(2, typeName);
        }
 
        String foodTypeImg = entity.getFoodTypeImg();
        if (foodTypeImg != null) {
            stmt.bindString(3, foodTypeImg);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(4, createTime.getTime());
        }
 
        java.util.Date updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindLong(5, updateTime.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FoodType entity) {
        stmt.clearBindings();
 
        Long foodTypeId = entity.getFoodTypeId();
        if (foodTypeId != null) {
            stmt.bindLong(1, foodTypeId);
        }
 
        String typeName = entity.getTypeName();
        if (typeName != null) {
            stmt.bindString(2, typeName);
        }
 
        String foodTypeImg = entity.getFoodTypeImg();
        if (foodTypeImg != null) {
            stmt.bindString(3, foodTypeImg);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(4, createTime.getTime());
        }
 
        java.util.Date updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindLong(5, updateTime.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FoodType readEntity(Cursor cursor, int offset) {
        FoodType entity = new FoodType( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // foodTypeId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // typeName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // foodTypeImg
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // createTime
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)) // updateTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FoodType entity, int offset) {
        entity.setFoodTypeId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTypeName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFoodTypeImg(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCreateTime(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setUpdateTime(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FoodType entity, long rowId) {
        entity.setFoodTypeId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FoodType entity) {
        if(entity != null) {
            return entity.getFoodTypeId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FoodType entity) {
        return entity.getFoodTypeId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
